#!/usr/bin/env python
PACKAGE = "swanson_algorithms"

from dynamic_reconfigure.parameter_generator_catkin import *
gen = ParameterGenerator()

gen.add("filter_gnd",       bool_t,   0, "True = Segment out the ground if the ground line-based method is being used", True)
gen.add("visualize_debug_imgs",  bool_t,   0, "Show helper images", False)

gen.add("gnd_seg_method",   bool_t,   0, "Switches the method used for segmenting out obstacles from depth image. True = ground line-based method, False = object-based method",  False)
gen.add("contourFiltMinThresh", double_t, 0, "Minimum threshold for a contour to count as a potential obstacles",  50.0, 0,   1000.0)
contourFiltMethEnum = gen.enum([ gen.const("Perimeter",     int_t, 1, "A small constant"),
                                 gen.const("Area",          int_t, 2, "A medium constant")],
                                 "Method used for filtering obstacle contours found in the umap")
gen.add("contourFiltMeth", int_t, 0, "Method used for filtering obstacle contours found in the umap", 1, 1, 2, edit_method=contourFiltMethEnum)

gen.add("max_obstacle_height", double_t, 0, "Max Height (m) used for filtering extracted pointcloud",  0.5, -5.0,   5.0)
gen.add("max_obstacle_range", double_t, 0, "Min Height (m) used for filtering extracted pointcloud",  10.0, 0,   25.0)
gen.add("min_obstacle_height", double_t, 0, "Max Distance (m) used for filtering extracted pointcloud",  1.0, -5.0,   5.0)
gen.add("min_obstacle_range", double_t, 0, "Min Distance (m) used for filtering extracted pointcloud",  0.1, 0,   25.0)
gen.add("voxel_res_x", double_t, 0, "Voxel resolution (m) in the X-axis",  0.02, 0,   2.0)
gen.add("voxel_res_y", double_t, 0, "Voxel resolution (m) in the Y-axis",  0.075, 0,  2.0)
gen.add("voxel_res_z", double_t, 0, "Voxel resolution (m) in the Z-axis",  0.02, 0,   2.0)
gen.add("gnd_upper_offset", int_t, 0, "Ground line offset (pixels) above estimated ground line (if found) in the vmap. Note: Used by both methods",  10, 0,   100)
gen.add("gnd_lower_offset", int_t, 0, "Ground line offset (pixels) below estimated ground line (if found) in the vmap. Note: Used only by ground-line-base method",  25, 0,   100)
gen.add("sor_min_neighbors", int_t, 0, "Minimum number of neighbors around a point in the pointcloud to be an acceptable point. Used in pointcloud filtering.",  1, 0,   100)
gen.add("sor_dist_thresh", double_t, 0, "Radial distance (m) around a point in the pointcloud used for finding sor_min_neighbors. Used in pointcloud filtering.",  0.075, 0,   5.0)

gen.add("uThreshsStr", str_t, 0, "List of thresholds used for prefiltering the umap (top->bottom)",  "0.3,0.295,0.275,0.3")
gen.add("vThreshsStr", str_t, 0, "List of thresholds used for prefiltering the vmap (left->right)",  "0.3, 0.3,0.25,0.4")

exit(gen.generate(PACKAGE, "swanson_algorithms", "Vboats"))
