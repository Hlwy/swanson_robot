#!/usr/bin/env python
PACKAGE = "swanson_algorithms"

from dynamic_reconfigure.parameter_generator_catkin import *
gen = ParameterGenerator()

# General use-case parameters
gen.add("verbose",              bool_t,   0, "Verbose printouts", False)
gen.add("debug",                bool_t,   0, "Verbose debug printouts", False)
gen.add("visualize_debug_imgs", bool_t,   0, "Visualize (via imshow) intermediate processing images", False)
gen.add("publish_aux_imgs",     bool_t,   0, "Publish Auxillary Images (i.e. uvmaps, key processing images, etc.)", False)
gen.add("publish_raw_cloud",    bool_t,   0, "ROS Publish raw pointcloud", True)
gen.add("publish_filter_cloud", bool_t,   0, "ROS Publish filtered pointcloud", True)
gen.add("filter_gnd",           bool_t,   0, "True = Segment out the ground if the ground line-based method is being used", True)
gen.add("gnd_seg_method",       bool_t,   0, "Switches the method used for segmenting out obstacles from depth image. True = ground line-based method, False = object-based method",  False)

# Umap contour filtering
contourFiltMethEnum = gen.enum([ gen.const("Perimeter", int_t, 1, ""), gen.const("Area", int_t, 2, "")], "")
gen.add("contourFiltMeth",      int_t,    0, "Method used for filtering obstacle contours found in the umap", 1, 1, 2, edit_method=contourFiltMethEnum)
gen.add("contourFiltMinThresh", double_t, 0, "Minimum threshold for a contour to count as a potential obstacles",  40.0, 0,   1000.0)

# Pointcloud filtering parameters
gen.add("cloud_filter_limits",  bool_t,   0, "Enables pointcloud filtering using defined limits",  True)
gen.add("max_obstacle_height",  double_t, 0, "Max Height (m) used for filtering extracted pointcloud",  0.5, -5.0,   5.0)
gen.add("max_obstacle_range",   double_t, 0, "Min Height (m) used for filtering extracted pointcloud",  10.0, 0,   25.0)
gen.add("min_obstacle_height",  double_t, 0, "Max Distance (m) used for filtering extracted pointcloud",  1.0, -5.0,   5.0)
gen.add("min_obstacle_range",   double_t, 0, "Min Distance (m) used for filtering extracted pointcloud",  0.1, 0,   25.0)
gen.add("cloud_filter_voxelize",bool_t,   0, "Enables pointcloud downsampling into voxels",  True)
gen.add("voxel_res_x",          double_t, 0, "Voxel resolution (m) in the X-axis",  0.02, 0,   2.0)
gen.add("voxel_res_y",          double_t, 0, "Voxel resolution (m) in the Y-axis",  0.02, 0,  2.0)
gen.add("voxel_res_z",          double_t, 0, "Voxel resolution (m) in the Z-axis",  0.02, 0,   2.0)
gen.add("cloud_filter_radius",  bool_t,   0, "Enables pointcloud filtering using radial outlier removal",  True)
gen.add("sor_dist_thresh",      double_t, 0, "Radial distance (m) around a point in the pointcloud used for finding sor_min_neighbors. Used in pointcloud filtering.",  0.075, 0,   5.0)
gen.add("sor_min_neighbors",    int_t,    0, "Minimum number of neighbors around a point in the pointcloud to be an acceptable point. Used in pointcloud filtering.",  10, 0,   100)

# Ground line removal parameters
gen.add("gnd_upper_offset",          int_t,    0, "Ground line offset (pixels) above estimated ground line (if found) in the vmap. Note: Used by both methods",  5, 0,   100)
gen.add("gnd_lower_offset",          int_t,    0, "Ground line offset (pixels) below estimated ground line (if found) in the vmap. Note: Used only by ground-line-base method",  25, 0,   100)
gen.add("max_gnd_deg",               double_t, 0, "",  89.0, 0.0,   90.0)
gen.add("min_gnd_deg",               double_t, 0, "",  26.0, 0.0,   90.0)
gen.add("use_custom_umap_filtering", bool_t,   0, "", True)
gen.add("umap_custom_thresh_perc",   double_t, 0, "Threshold used for vmap sobel",  0.07, 0,   1.0)
gen.add("vmap_sobel_thresh",         int_t,    0, "Threshold used for vmap sobel",  30, 0,   256)
gen.add("vmask_subtract_sobel",      bool_t,   0, "", True)
gen.add("vmask_dilate_sobel",        bool_t,   0, "", True)
gen.add("vmask_sobel_dilate_sz",     int_t,    0, "", 3, 0, 10)

# TODO: Following should be deprecated
gen.add("uThreshsStr",               str_t,    0, "List of thresholds used for prefiltering the umap (top->bottom)",  "0.3,0.295,0.275,0.3")
gen.add("vThreshsStr",               str_t,    0, "List of thresholds used for prefiltering the vmap (left->right)",  "0.3, 0.3,0.25,0.4")

exit(gen.generate(PACKAGE, "swanson_algorithms", "Vboats"))
